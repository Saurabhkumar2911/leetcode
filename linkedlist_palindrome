/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *findmid(ListNode *head)
    {
        ListNode *slow=head;
        ListNode *fast=head->next;
        
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
         return slow;
    }
    
    ListNode *reverse(ListNode *head)
    {
        if(head==NULL)
            return head;
        
        ListNode *pre=NULL;
        ListNode *curr=head;
        ListNode *past=NULL;
        
        while(curr!=NULL)
        {
            past=curr->next;
            curr->next=pre;
            pre=curr;
            curr=past;
        }
        return pre;
    }
    
    bool isPalindrome(ListNode* head) {
        
        if(head==NULL || head->next==NULL)
            return true;
        
        ListNode *mid=findmid(head);
        
        ListNode *temp=mid->next;
        mid->next=reverse(temp);
        
        ListNode *a=head;
        ListNode *b=mid->next;
        
        while(b!=NULL)
        {
            if(a->val != b->val)
                return false;
            
            a=a->next;
            b=b->next;
        }
        return true;
    }
};
